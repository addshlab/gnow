#!/bin/bash

#------------------------------
# Text Color
#------------------------------
function green  { echo -e "\e[32m$*\e[m"; }
function red { echo -e "\e[31m$*\e[m"; }
function yellow { echo -e "\e[33m$*\e[m"; }
function green_white { echo -e "\e[32;47m$*\e[m"; }

#------------------------------
# Confirm the existence of the Git repository.
#------------------------------
if [ `echo "$(git status -s 2>&1 > /dev/null | awk '{print $1}')'" | grep '^fatal'` ]; then
  red 'No git repository exists in this directory.'
else
  GIT_STATUS=`git status -s`
  BRANCH=`git rev-parse --abbrev-ref HEAD`
  BRANCH_EXIST=`git branch`
  REPO_EXIST=1
fi

DATE=`date +'%Y-%m-%d %T'`
VERSION=v1.0.1

#------------------------------
# Check git repository exists.
#------------------------------
function has_repo {
  if [ -z $REPO_EXIST ]; then
      exit 1;
  fi
}

#------------------------------
# Commit
#------------------------------
function fast_commit {
  has_repo

  green_white ' COMMIT '

  if [ -z "`git status -s`" ]; then
    yellow 'Nothing to stage.'
    exit 0
  fi

  # コミットメッセージ引数が無い場合は日付とステータスをメッセージとする
  # If there is no commit message argument, the date and status will be used as the message.
  if [ -z "${1}" ]; then
    MESSAGE="${DATE} ${GIT_STATUS}"
  else
    MESSAGE="${1}"
  fi

  # ローカルのブランチが存在しない初回pushとみられる場合はmasterにpushする
  # Push to master if it appears to be the first push where no local branch exists.
  if [ -z "${BRANCH_EXIST}" ]; then
    BRANCH=master
    yellow 'Initial Commit'
  fi

  yellow 'message'
  echo ' ┗ '${MESSAGE}
  yellow 'branch'
  echo ' ┗ '${BRANCH}
  echo "Ready? [n/Y]:"

  read input
  if [ "${input}" = 'no' ] || [ "${input}" = 'NO' ] || [ "${input}" = 'n' ]; then
    exit 0
  elif [ "${input}" = 'yes' ] || [ "${input}" = 'YES' ] || [ "${input}" = 'y' ]; then
    git add -A
    git commit -m "${MESSAGE}"
    green 'Commit done. ✔'
  else
    red 'Process aborted.'
    exit 0
  fi
} # fast_commit end

#------------------------------
# Push
#------------------------------
function fast_push {
  has_repo

  # ステージングにファイルが存在するか
  if [ -z "`git status -s`" ]; then
    yellow 'Nothing to stage.'
  else
    sleep 0.5
    fast_commit "${1}"
  fi

  # コミット済みファイルが存在するか
  if [ -z "`git log --pretty=format:"%H" origin/${BRANCH}..HEAD`" ]; then
    yellow 'Nothing to commit.'
    exit 0
  fi

  green_white ' PUSH '

  # ローカルのブランチが存在しない初回pushとみられる場合はmasterにpushする
  # Push to master if it appears to be the first push where no local branch exists.
  if [ -z "${BRANCH_EXIST}" ]; then
    BRANCH=master
    yellow 'Initial Commit'
  fi

  echo 'Push your commits.'
  yellow 'branch'
  echo ' ┗ '${BRANCH}
  echo "Ready? [n/Y]:"

  read input
  if [ "${input}" = 'no' ] || [ "${input}" = 'NO' ] || [ "${input}" = 'n' ]; then
    exit 0
  elif [ "${input}" = 'yes' ] || [ "${input}" = 'YES' ] || [ "${input}" = 'y' ]; then
    git push origin ${BRANCH}
    green 'Push done. ✔'
  else
    red 'Process aborted.'
    exit 0
  fi
} # fast_push end

#------------------------------
# Tags
#------------------------------
function fast_tag {
  has_repo

  LATEST_TAG=`git tag | sed s/v//g | sort -t . -n -k1,1 -k2,2 -k3,3 | tail -n1`
  PATCH_VER=${LATEST_TAG##*.}
  PATCH_INCREMENT="${LATEST_TAG%.*}.$(( ${PATCH_VER} + 1 ))"
  NEW_TAG=${1}
  if [ -z ${NEW_TAG} ]; then
    green "Latest tag is ${LATEST_TAG}"
    green "Auto-incremented version is ${PATCH_INCREMENT}"
    green "Ready? [n/Y]:"
    read input
    if [ "${input}" = 'no' ] || [ "${input}" = 'NO' ] || [ "${input}" = 'n' ]; then
      exit 0
    elif [ "${input}" = 'yes' ] || [ "${input}" = 'YES' ] || [ "${input}" = 'y' ]; then
      git tag -a "v${PATCH_INCREMENT}" -m "v${PATCH_INCREMENT}"
      git push origin --tags
    else
      red 'Process aborted.'
      exit 0
    fi
  else
    green "Latest tag is ${LATEST_TAG}"
    green "New tag is ${NEW_TAG}"
    green "Ready? [n/Y]:"
    read input
    if [ "${input}" = 'no' ] || [ "${input}" = 'NO' ] || [ "${input}" = 'n' ]; then
      exit 0
    elif [ "${input}" = 'yes' ] || [ "${input}" = 'YES' ] || [ "${input}" = 'y' ]; then
      git tag -a "${NEW_TAG}" -m "${NEW_TAG}"
      git push origin --tags
    else
      red 'Process aborted.'
      exit 0
    fi
  fi
} # fast_tag end

#------------------------------
# How to use
#------------------------------
usage() {
  green "gnow command :: git commit for now"
  echo "This is the 'gnow' command to do a quick git commit and git push."
  echo
  echo "Options:"
  echo "  -h, --help :Show helps."
  echo "  -v, -V, --version :Show version."
  echo "  -t, --tag [ARG] :Add tag. If no argument, current version will be automatically incremented."
  echo
  exit 1
}

#------------------------------
# Command arguments
#------------------------------
for OPT in "$@"
do
  case $OPT in
    -h | --help)
      usage
      exit 1
    ;;
    -v | -V |--version)
      echo $VERSION
      exit 1
    ;;
    -c | --commit)
      if [[ -z "$2" ]] || [[ "$2" =~ ^-+ ]]; then
        fast_commit
        exit 1
      else
        fast_commit $2 @@push@@
        exit 1
      fi
      shift 2 
    ;;
    -t | --tag)
      if [[ -z "$2" ]] || [[ "$2" =~ ^-+ ]]; then
        fast_tag
        exit 1
      else
        fast_tag $2
        exit 1
      fi
      shift 2
    ;;
    -- | -)
      shift 1
      param+=( "$@" )
      break
    ;;
    -*)
      echo "$PROGNAME: illegal option -- '$(echo $1 | sed 's/^-*//')'" 1>&2
      exit 1
    ;;
    *)
      if [[ ! -z "$1" ]] && [[ ! "$1" =~ ^-+ ]]; then
        param+=( "$1" )
        shift 1
        fast_push "$param"
      fi
    ;;
  esac
done

#------------------------------
# Run without any arguments
#------------------------------
if [ -z "$param" ]; then
  fast_push
fi

exit 0
